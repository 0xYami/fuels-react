/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.31.0
  Forc version: 0.32.2
  Fuel-Core version: 0.17.1
*/

import { Interface, Contract } from 'fuels';
import type { Provider, BaseWalletLocked, AbstractAddress } from 'fuels';
import type { CounterAbi, CounterAbiInterface } from '../CounterAbi';

const _abi = {
  types: [
    {
      typeId: 0,
      type: '()',
      components: [],
      typeParameters: null,
    },
    {
      typeId: 1,
      type: 'u64',
      components: null,
      typeParameters: null,
    },
  ],
  functions: [
    {
      inputs: [],
      name: 'counter',
      output: {
        name: '',
        type: 1,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read'],
        },
      ],
    },
    {
      inputs: [],
      name: 'decrement',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read', 'write'],
        },
      ],
    },
    {
      inputs: [],
      name: 'increment',
      output: {
        name: '',
        type: 0,
        typeArguments: null,
      },
      attributes: [
        {
          name: 'storage',
          arguments: ['read', 'write'],
        },
      ],
    },
  ],
  loggedTypes: [],
  messagesTypes: [],
  configurables: [],
};

export class CounterAbi__factory {
  static readonly abi = _abi;
  static createInterface(): CounterAbiInterface {
    return new Interface(_abi) as unknown as CounterAbiInterface;
  }
  static connect(
    id: string | AbstractAddress,
    walletOrProvider: BaseWalletLocked | Provider,
  ): CounterAbi {
    return new Contract(id, _abi, walletOrProvider) as unknown as CounterAbi;
  }
}
